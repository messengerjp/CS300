#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>

using namespace std;

// Course structure to store course details
struct Course {
    string courseID;
    string courseName;
    vector<string> prerequisites;
    Course* left;
    Course* right;

    Course(string id, string name) : courseID(id), courseName(name), left(nullptr), right(nullptr) {}
};

// Binary Search Tree to store and manage courses
class CourseBST {
private:
    Course* root;

    // Recursive insert function
    Course* insert(Course* node, string id, string name, vector<string> prereqs) {
        if (!node) {
            Course* newCourse = new Course(id, name);
            newCourse->prerequisites = prereqs;
            return newCourse;
        }
        if (id < node->courseID) node->left = insert(node->left, id, name, prereqs);
        else node->right = insert(node->right, id, name, prereqs);
        return node;
    }

    // Recursive inorder traversal for sorted display
    void inorder(Course* node) {
        if (!node) return;
        inorder(node->left);
        cout << node->courseID << " - " << node->courseName << endl;
        inorder(node->right);
    }

    // Recursive search function
    Course* search(Course* node, string id) {
        if (!node || node->courseID == id) return node;
        if (id < node->courseID) return search(node->left, id);
        return search(node->right, id);
    }

public:
    CourseBST() : root(nullptr) {}

    void insert(string id, string name, vector<string> prereqs) {
        root = insert(root, id, name, prereqs);
    }

    void displaySortedCourses() {
        inorder(root);
    }

    void printCourseInfo(string id) {
        Course* course = search(root, id);
        if (!course) {
            cout << "Course not found!" << endl;
            return;
        }
        cout << "Course: " << course->courseID << " - " << course->courseName << endl;
        if (!course->prerequisites.empty()) {
            cout << "Prerequisites: ";
            for (const string& prereq : course->prerequisites) {
                cout << prereq << " ";
            }
            cout << endl;
        }
        else {
            cout << "No prerequisites." << endl;
        }
    }
};

// Function to read CSV file and load courses into BST
void loadCourses(string filename, CourseBST& tree) {
    ifstream file(filename);
    if (!file.is_open()) {
        cout << "Error opening file!" << endl;
        return;
    }

    string line;
    while (getline(file, line)) {
        stringstream ss(line);
        string id, name, prereq;
        vector<string> prereqs;

        getline(ss, id, ',');
        getline(ss, name, ',');

        while (getline(ss, prereq, ',')) {
            prereqs.push_back(prereq);
        }

        tree.insert(id, name, prereqs);
    }

    file.close();
    cout << "Courses loaded successfully!" << endl;
}

int main() { //The one and only main() function
    CourseBST tree;
    int choice;
    string courseID;
    string filename = "CS 300 ABCU_Advising_Program_Input.csv";

    do {
        cout << "\nMenu:\n";
        cout << "1. Load Course Data\n";
        cout << "2. Print Course List (Sorted)\n";
        cout << "3. Print Course Information\n";
        cout << "9. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            
            loadCourses(filename, tree);
            break;
        case 2:
            cout << "\nSorted Course List:\n";
            tree.displaySortedCourses();
            break;
        case 3:
            cout << "Enter course ID: ";
            cin >> courseID;
            tree.printCourseInfo(courseID);
            break;
        case 9:
            cout << "Exiting program...\n";
            break;
        default:
            cout << choice << " is not a valid option." << endl;
        }
    } while (choice != 9);

    return 0;
}
